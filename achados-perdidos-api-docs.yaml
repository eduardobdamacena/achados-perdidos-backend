openapi: 3.0.3
info:
  title: Achados e Perdidos
  description: API back-end da aplicação Achados e Perdidos
  version: 0.3.0
  contact:
    name: Eduardo Busato Damacena
    email : eduardobusato51@gmail.com
servers :
  - url: http://localhost:8000
    description: Aplicação Python Local
tags :
  - name: Api
  - name: Auth
  - name: Local
  - name: Objeto
paths:
   /api:
     get:
       operationId: getLinks
       tags:
         - Api
       description: Exibe os links iniciais da aplicação
       responses:
         '200' :
            description: Exibição foi realizada com sucesso
            content:
              'application/json':
                schema:
                  type: object
                  properties:
                    links:
                      type: array
                      items:
                        $ref: '#/components/schemas/LinkResponse'
   /api/auth/login:
     post:
       operationId: login
       tags:
         - Auth
       description: Realiza login de um administrador
       requestBody:
         content:
           'application/json':
             schema:
               $ref: "#/components/schemas/CredentialsRequest"
       responses:
         '200':
           description: "Autenticação realizada com sucesso"
           content:
             'application/json':
               schema:
                 $ref: "#/components/schemas/TokenResponse"
         '400':
           description: Houveram erros de validação
           content:
             'application/json':
               schema:
                 $ref: "#/components/schemas/ValidationErrorResponse"
         '401':
           description: Credenciais incorretas
           content:
             'application/json':
               schema:
                   $ref: "#/components/schemas/ErrorResponse"
   /api/auth/refresh:
     post:
       operationId: refreshToken
       description: Atualizar token de acesso
       tags:
         - Auth
       requestBody:
         content:
           'application/json':
             schema:
               $ref: "#/components/schemas/RefreshRequest"
       responses:
         '200':
           description: "Refresh token obtido com sucesso"
           content:
             'application/json':
               schema:
                 $ref: "#/components/schemas/TokenResponse"
         '400':
           description: "Houveram erros de validação"
           content:
             'application/json':
               schema:
                 $ref: "#/components/schemas/ValidationErrorResponse"
         '401':
           description: "Refresh token inválido"
           content:
             'application/json':
               schema:
                 $ref: "#/components/schemas/ErrorResponse"
   /api/auth/logout:
     post:
       operationId: logout
       description: Deslogar usuário da aplicação
       tags:
         - Auth
       requestBody:
         content:
           'application/json':
             schema:
               $ref: "#/components/schemas/RefreshRequest"
       responses:
         '205':
            description: Logout realizado com sucesso
         '400':
           description: Houveram erros de validação
           content:
             'application/json':
               schema:
                 $ref: "#/components/schemas/ValidationErrorResponse"
         '401':
           description: "Token inválido"
           content:
             'application/json':
               schema:
                 $ref: "#/components/schemas/ErrorResponse"
       security:
         - JWT: []
   /api/locais:
     post:
       operationId: postLocais
       description: Cadastra um novo local e administrador
       tags:
         - Local
       requestBody:
         content:
           'application/json':
             schema:
               $ref: "#/components/schemas/CreateLocalRequest"
       responses:
         '201':
           description: Local criado com sucesso
           content:
             'application/json':
               schema:
                 $ref: "#/components/schemas/LocalResponse"
         '400':
           description: "Houveram erros de validação"
           content:
             'application/json':
               schema:
                 $ref: "#/components/schemas/ValidationErrorResponse"
     get:
       operationId: getLocal
       description: Exibe os dados do usuário logado
       tags:
         - Local
       responses:
         '200':
           description: Local obtido com sucesso
           content:
             'application/json':
               schema:
                 $ref: "#/components/schemas/LocalResponse"

         '401':
           description: "Token inválido"
           content:
             'application/json':
               schema:
                 $ref: "#/components/schemas/ErrorResponse"
       security:
         - JWT: []
   /api/locais/imagem:
     post:
       operationId: postImagemLocal
       description: Definir imagem para o local
       tags:
         - Local
       requestBody:
         content:
           'multipart/form-data':
             schema:
               $ref: "#/components/schemas/ImagemLocalRequest"
       responses:
         '200':
           description: Imagem do Local definida
           content:
             'application/json':
               schema:
                 $ref: "#/components/schemas/MessageResponse"
         '400':
           description: "Houveram erros de validação"
           content:
             'application/json':
               schema:
                 $ref: "#/components/schemas/ValidationErrorResponse"
         '401':
           description: "Refresh token inválido"
           content:
             'application/json':
               schema:
                 $ref: "#/components/schemas/ErrorResponse"
       security:
         - JWT: []
   /api/locais/busca:
    get:
      operationId: buscaLocais
      description: Busca locais cadastrados por nome
      tags:
        - Local
      parameters:
        - name: nome
          in: query
          description: Termo de busca do local
          required: true
          schema:
            type: string
          example: "empresa x"
      responses:
        '200':
          description: Busca realizada com sucesso
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ShortLocalResponse"
        '400':
           description: "Houveram erros de validação"
           content:
             'application/json':
               schema:
                 $ref: "#/components/schemas/ValidationErrorResponse"
   /api/locais/{localId}/objetos:
    get:
      operationId: listaObjetosLocal
      description: Lista os objetos cadastrados de um local
      tags:
        - Local
      parameters:
        - name: localId
          in: path
          description: ID do local
          required: true
          schema:
            type: string
          example: 1
      responses:
        '200':
          description: Objetos obtidos com sucesso
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ShortObjetosResponse"
        '404':
          description: "Objeto não encontrado"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/MessageResponse"
   /api/objetos:
    get:
      operationId: getObjetos
      description: Lista os objetos cadastrados para o local do usuário logado
      tags:
        - Objeto
      responses:
        '200':
          description: Objetos obtidos com sucesso
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ObjetosResponse"
        '401':
          description: "Token inválido"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - JWT: []
    post:
      operationId: registrarObjeto
      description: Cadastrar um objeto no local do usuário logado
      tags:
        - Objeto
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/ObjetoRequest"
      responses:
        '201':
          description: Objeto cadastrado
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ObjetosResponse"
        '400':
           description: Houveram erros de validação
           content:
             'application/json':
               schema:
                 $ref: "#/components/schemas/ValidationErrorResponse"
        '401':
          description: "Token inválido"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - JWT: []
   /api/objetos/{objetoId}/imagem:
    post:
      operationId: postImageObjeto
      description: Definir imagem do objeto
      tags:
        - Objeto
      parameters:
        - name: objetoId
          in: path
          description: ID do objeto que receberá a imagem
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        content:
          'multipart/form-data':
            schema:
               $ref: "#/components/schemas/ImagemObjetoRequest"
      responses:
        '200':
          description: "Imagem definida"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/MessageResponse"
        '400':
          description: "Houveram erros de validação"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        '401':
          description: "Token inválido"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
      security:
        - JWT: []
   /api/objetos/{objetoId}:
    get:
      operationId: getObjeto
      description:  Exibir os dados de um objeto
      tags:
        - Objeto
      parameters:
        - name: objetoId
          in: path
          description: ID do objeto que será obtido
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: "Objeto obtido"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ObjetosResponse"
        '401':
          description: "Token inválido"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: "Objeto não encontrado"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/MessageResponse"
      security:
        - JWT: []
    put:
      operationId: putObjeto
      description: Alterar dados de um objeto
      tags:
        - Objeto
      parameters:
        - name: objetoId
          in: path
          description: "ID do objeto que será alterado"
          required: true
          schema:
            type: integer
          example: 1
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/ObjetoRequest"
      responses:
        '200':
          description: "Objeto atualizado"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ObjetosResponse"
        '400':
          description: "Houveram erros de validação"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ValidationErrorResponse"
        '401':
          description: "Token inválido"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: "Objeto não encontrado"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/MessageResponse"
      security:
        - JWT: []
    delete:
      operationId: deleteObjeto
      description: "Remover objeto"
      tags:
        - Objeto
      parameters:
        - name: objetoId
          in: path
          description: "ID do objeto para remover"
          required: true
          schema:
            type: integer
          example: 1
      responses:
        '204':
          description: "Objeto removido"
          content:
              "application/json":
                schema:
                  $ref: "#/components/schemas/MessageResponse"
        '401':
          description: "Token inválido"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: "Objeto não encontrado"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/MessageResponse"
      security:
        - JWT: []
components :
  schemas :
    LinkResponse:
      type: object
      properties:
        type:
          type: string
          enum:
            - GET
            - POST
            - PUT
            - PATCH
            - DELETE
        rel:
          type: string
        uri:
          type: string
          format: uri
    CredentialsRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          minLength: 3
          maxLength: 255
        password:
          type: string
          format: password
    TokenResponse:
      type: object
      properties:
        access:
          type: string
        refresh:
          type: string
    ValidationErrorResponse:
      type: object
      additionalProperties:
            type: array
            items:
              type: string
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        detail:
          type: string
    RefreshRequest:
      type: object
      required:
        - refresh
      properties:
          refresh:
            type: string
    CreateLocalRequest:
      type: object
      required:
        - nome
        - endereco
        - contato
        - usuario
      properties:
        nome:
          type: string
          minLength: 3
          maxLength: 255
        endereco:
          type: string
          minLength: 3
          maxLength: 255
        contato:
          type: string
          minLength: 3
          maxLength: 255
        descricao:
          type: string
          maxLength: 255
        usuario:
            $ref: "#/components/schemas/UsuarioRequest"
    ShortLocalResponse:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        endereco:
          type: string
        contato:
          type: string
        descricao:
          type: string
        imagem:
          type: string
          format: uri
        links:
          type: array
          items:
            $ref: '#/components/schemas/LinkResponse'
    LocalResponse:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        endereco:
          type: string
        contato:
          type: string
        descricao:
          type: string
        imagem:
          type: string
          format: uri
        usuario:
          $ref: "#/components/schemas/UsuarioResponse"
        links:
          type: array
          items:
            $ref: '#/components/schemas/LinkResponse'
    MessageResponse:
      type: object
      properties:
        mensagem:
          type: string
    ImagemLocalRequest:
      type: object
      required:
        - imagem_local
      properties:
        imagem_local:
          type: string
          format: binary
    UsuarioRequest:
          type: object
          required:
            - nome
            - email
            - password
            - password_confirmation
          properties:
            nome:
              type: string
              minLength: 3
              maxLength: 255
            email:
              type: string
              format: email
              minLength: 3
              maxLength: 255
            password:
              type: string
              format: password
            password_confirmation:
              type: string
              format: password
    UsuarioResponse:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        email:
          type: string
          format: email
    ObjetoRequest:
      type: object
      required:
        - nome
        - descricao
      properties:
        nome:
          type: string
        descricao:
          type: string
    ShortObjetosResponse:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        descricao:
          type: string
        entregue:
          type: boolean
        data_cadastro:
          type: string
        imagem:
          type: string
    ObjetosResponse:
      type: object
      properties:
        id:
          type: integer
        nome:
          type: string
        descricao:
          type: string
        entregue:
          type: boolean
        data_cadastro:
          type: string
        imagem:
          type: string
        links:
          type: array
          items:
            $ref: '#/components/schemas/LinkResponse'
    ImagemObjetoRequest:
      type: object
      required:
        - imagem_objeto
      properties:
        imagem_objeto:
          type: string
          format: binary
  securitySchemes:
    JWT:
      type: http
      scheme: bearer